import { Document, Schema, model, Model } from 'mongoose';

export interface ICar extends Document {
    name: string;
    brand: string;
    year: number;
    color: string;
    price: number;
    isSold: boolean;
    managerId: Schema.Types.ObjectId;
    customerId?: Schema.Types.ObjectId;
}

const carSchema = new Schema<ICar>({
name: {
    type: String,
    required: true 
    },
  brand: {
    type: String,
    required: true
  },
  year: {
    type: Number,
    required: true
  },
  color: {
    type: String,
    required: true
  },
  price: {
    type: Number,
    required: true
  },
  isSold: {
    type: Boolean, 
    default: false
  },
  managerId: {
    type: Schema.Types.ObjectId, ref: 'Manager'
  },
  customerId: { 
    type: Schema.Types.ObjectId, ref: 'Customer'
  }
}, { timestamps: true });

export const Car: Model<ICar> = model<ICar>('Car', carSchema);

import { Document, model, Model, Schema, Types } from 'mongoose';

interface IBudgetRange {
  min: number;
  max: number;
}

export interface ICustomer extends Document {
  userId: Types.ObjectId;
  phone?: string;
  address?: string;
  preferredBrands?: string[];
  purchasedCars?: Types.ObjectId[];
  budgetRange?: IBudgetRange;
}

const customerSchema = new Schema<ICustomer>(
  {
    userId: {
      type: Schema.Types.ObjectId,
      ref: 'User',
      required: true,
      unique: true,
    },
    phone: { type: String },
    address: { type: String },
    preferredBrands: [{ type: String }],
    purchasedCars: [
      {
        type: Schema.Types.ObjectId,
        ref: 'Car',
      },
    ],
    budgetRange: {
      min: { type: Number },
      max: { type: Number },
    },
  },
  { timestamps: true }
);

export const Customer: Model<ICustomer> = model<ICustomer>('Customer', customerSchema);

import { Document, model, Model, Schema, Types } from 'mongoose';

export interface IManager extends Document {
  userId: Types.ObjectId;
  company: string;
  stock: number;
  managedCars: Types.ObjectId[];
}

const managerSchema = new Schema<IManager>({
  userId: {
    type: Schema.Types.ObjectId,
    ref: 'User',
    required: true,
    unique: true,
  },
  company: { type: String, required: true },
  stock: { type: Number },
  managedCars: [{ type: Schema.Types.ObjectId, ref: 'Car' }],
}, { timestamps: true });

export const Manager: Model<IManager> = model<IManager>('Manager', managerSchema);

import { Document, model, Schema, Model } from 'mongoose';
import bcrypt from 'bcryptjs';

export interface IUser extends Document {
  name: string;
  email: string;
  password: string;
  role: 'customer' | 'manager';
  comparePassword(password: string): Promise<boolean>;
}

const userSchema = new Schema<IUser>(
  {
    name: { type: String, required: true, trim: true },
    email: { type: String, required: true, unique: true, lowercase: true, trim: true },
    password: { type: String, required: true },
    role: {
      type: String,
      enum: ['customer', 'manager'],
      required: true,
    },
  },
  { timestamps: true }
);

userSchema.pre<IUser>('save', async function (next) {
  if (!this.isModified('password')) return next();

  const salt = await bcrypt.genSalt(10);
  this.password = await bcrypt.hash(this.password, salt);
  next();
});

userSchema.methods.comparePassword = async function (
  password: string
): Promise<boolean> {
  return await bcrypt.compare(password, this.password);
};

export const User = model<IUser>('User', userSchema);
